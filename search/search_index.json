{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HSM-backed Bitcoin Cold Storage Square's Bitcoin Cold Storage solution. For security purposes, Square stores a reserve of Bitcoins in an offline setting. By having these funds offline, we reduce attack surface and hence risk of theft. Subzero, Square's solution, is unique. Specifically, we leverage FIPS-certified Hardware Security Modules (HSMs) to protect the private key material. We decided to use such HSMs because we already own, operate, and trust these devices for other payments-related needs. We feel our solution defends against external as well as insider threats. Funds can be sent from online systems to the cold storage at any time. Moving funds out of cold storage requires a multi-party signing ceremony. In addition, the offline HSMs are able to enforce business logic rules; for instance we only allow sending funds to Square-owned addresses. Such a scheme is usually called defense in depth or an onion model. We maintain the online/offline isolation by importing transaction metadata and exporting signatures using QR codes. HSMs have the ability to share key material. This enables us the ability to store our backups in encrypted form and restore a wallet at any location. This repo contains our design documents as well as specific technical information. We are sharing our source code, with the caveat that the code is currently only useful if you have the exact same hardware setup. We are willing to make the code more modular over time, as long as the broader community shows interest to implement support for additional hardware vendors. A multi-party signing ceremony is needed to unlock funds. Map \u00a9 Domaina / Wikimedia Commons / CC-BY-SA-3.0. The word \"QR Code\" is registered trademark of Denso Wave Inc. FIPS publication 140-2 (Security Requirements for Cryptographic Modules) is a US government standards.","title":"Learn"},{"location":"#hsm-backed-bitcoin-cold-storage","text":"Square's Bitcoin Cold Storage solution. For security purposes, Square stores a reserve of Bitcoins in an offline setting. By having these funds offline, we reduce attack surface and hence risk of theft. Subzero, Square's solution, is unique. Specifically, we leverage FIPS-certified Hardware Security Modules (HSMs) to protect the private key material. We decided to use such HSMs because we already own, operate, and trust these devices for other payments-related needs. We feel our solution defends against external as well as insider threats. Funds can be sent from online systems to the cold storage at any time. Moving funds out of cold storage requires a multi-party signing ceremony. In addition, the offline HSMs are able to enforce business logic rules; for instance we only allow sending funds to Square-owned addresses. Such a scheme is usually called defense in depth or an onion model. We maintain the online/offline isolation by importing transaction metadata and exporting signatures using QR codes. HSMs have the ability to share key material. This enables us the ability to store our backups in encrypted form and restore a wallet at any location. This repo contains our design documents as well as specific technical information. We are sharing our source code, with the caveat that the code is currently only useful if you have the exact same hardware setup. We are willing to make the code more modular over time, as long as the broader community shows interest to implement support for additional hardware vendors. A multi-party signing ceremony is needed to unlock funds. Map \u00a9 Domaina / Wikimedia Commons / CC-BY-SA-3.0. The word \"QR Code\" is registered trademark of Denso Wave Inc. FIPS publication 140-2 (Security Requirements for Cryptographic Modules) is a US government standards.","title":"HSM-backed Bitcoin Cold Storage"},{"location":"address_derivation/","text":"Address derivation After each location has finalized their wallet, the Coordinate service is able to use all the xpub to derive addresses. The following derivation scheme is used inside the HSM: m / coin_type' / account / change / address_index The Coordinator service thus computes the account / change / address_index derivation. Multisig + segwit A multisig script is then computed. For example, with the sample transaction: echo '5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae' | bx script-decode 2 [022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c] [02359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d087796] [02fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc52530] [036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d24] 4 checkmultisig This script is wrapped in a pay-to-script-hash (P2SH), with the resulting address a914fa... : echo '5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae' | bx sha256 5211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a echo '00205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a' | bx bitcoin160 faf4d7354aae5846569530283b31875e8439a2f1 echo 'hash160 [faf4d7354aae5846569530283b31875e8439a2f1] equal' | bx script-encode a914faf4d7354aae5846569530283b31875e8439a2f187","title":"Address derivation"},{"location":"address_derivation/#address-derivation","text":"After each location has finalized their wallet, the Coordinate service is able to use all the xpub to derive addresses. The following derivation scheme is used inside the HSM: m / coin_type' / account / change / address_index The Coordinator service thus computes the account / change / address_index derivation.","title":"Address derivation"},{"location":"address_derivation/#multisig-segwit","text":"A multisig script is then computed. For example, with the sample transaction: echo '5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae' | bx script-decode 2 [022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c] [02359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d087796] [02fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc52530] [036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d24] 4 checkmultisig This script is wrapped in a pay-to-script-hash (P2SH), with the resulting address a914fa... : echo '5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae' | bx sha256 5211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a echo '00205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a' | bx bitcoin160 faf4d7354aae5846569530283b31875e8439a2f1 echo 'hash160 [faf4d7354aae5846569530283b31875e8439a2f1] equal' | bx script-encode a914faf4d7354aae5846569530283b31875e8439a2f187","title":"Multisig + segwit"},{"location":"audit/","text":"Audit Source code At some point, we will perform a formal code audit and share the findings. Security World and keys We plan to add support in the UI to list all the available keys and their protection mechanisms. Until that functionality is baked in the UI, auditors can use the standard set of tools supplied by the HSM vendor. Balance beancounter is a tool we wrote which can be used to list the balances available in the gateway and cold wallets. The tool derives addresses associated with a given wallet and then contacts Electrum servers or a personal Btcd node to query transaction history. The transactions are then processed to compute a balance.","title":"Audit"},{"location":"audit/#audit","text":"","title":"Audit"},{"location":"audit/#source-code","text":"At some point, we will perform a formal code audit and share the findings.","title":"Source code"},{"location":"audit/#security-world-and-keys","text":"We plan to add support in the UI to list all the available keys and their protection mechanisms. Until that functionality is baked in the UI, auditors can use the standard set of tools supplied by the HSM vendor.","title":"Security World and keys"},{"location":"audit/#balance","text":"beancounter is a tool we wrote which can be used to list the balances available in the gateway and cold wallets. The tool derives addresses associated with a given wallet and then contacts Electrum servers or a personal Btcd node to query transaction history. The transactions are then processed to compute a balance.","title":"Balance"},{"location":"bug_bounty/","text":"Serious about security Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource .","title":"Bug Bounty"},{"location":"bug_bounty/#serious-about-security","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://bugcrowd.com/squareopensource .","title":"Serious about security"},{"location":"contributing/","text":"Contributing We appreciate your desire to contribute code to this repo. You may do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure all tests pass. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) . Pull requests need to be approved by two members of Square's security engineering team. Commits are signed by Square's security engineers. Merges are signed by GitHub. Contributors are not required to sign their commits.","title":"Contributing"},{"location":"contributing/#contributing","text":"We appreciate your desire to contribute code to this repo. You may do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure all tests pass. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) . Pull requests need to be approved by two members of Square's security engineering team. Commits are signed by Square's security engineers. Merges are signed by GitHub. Contributors are not required to sign their commits.","title":"Contributing"},{"location":"contributors/","text":"Contributors Building this cold storage solution involved many people. Engineers from various teams within Square generously contributed time and energy to review the initial design. They then helped write and review the code. A cross-function group of people were involved to build the physical locations, implement the design, write the coordinator service, test the solution and iterate on bug fixes. In addition to the list below (in alphabetical order), a (large) number of people asked to remain anonymous. Mat Byczkowski Jonathan Carter Matthew McPherrin Alok Menghrajani Emily Pirnack","title":"Contributors"},{"location":"contributors/#contributors","text":"Building this cold storage solution involved many people. Engineers from various teams within Square generously contributed time and energy to review the initial design. They then helped write and review the code. A cross-function group of people were involved to build the physical locations, implement the design, write the coordinator service, test the solution and iterate on bug fixes. In addition to the list below (in alphabetical order), a (large) number of people asked to remain anonymous. Mat Byczkowski Jonathan Carter Matthew McPherrin Alok Menghrajani Emily Pirnack","title":"Contributors"},{"location":"hsm_initialization/","text":"HSM initialization Before any operation can take place, all the HSMs need to be initialized. For various reasons, we decided to enroll all the HSMs in the same Security World. A Security World (or World for short) is a concept, which allows HSMs to share key material for redundancy purpose. Two HSMs enrolled in the same World are essentially identical. You can think of the World as the master encryption key, which other keys are then encrypted under. Enrolling a HSM in a World involves administrator smart cards. Blank cards are used to create a new World. Enrolling a HSM in an existing World requires the corresponding administrator smart cards. Main World Using the tools provided with the HSM, we create the main World. The smart cards which back this world need to be stored in a very secure location. They will be needed in the following cases: a number of HSMs (or locations) were damaged and the remaining locations no longer form a quorum. operators have lost their smart cards (or the passwords thereof) and new smart cards need to be issued. A 256-bit AES key (pubKey encryption key) is created at the same time as the main World. This key is used at wallet initialization time. When enrolling HSMs in the main World, the administrator need to initialize the nvram for rollback protection purpose. Typically, administrators will want to create a staging and a dev World. Creating all three Worlds at the same time is convenient. Signing World A different World is used to sign the Core code. This creates a separation of duty: the engineers who sign and release the Core code don't have direct access to decrypt wallets. Ideally, the public part of the signing keys would be exported from the signing World, into the main World (and staging and dev Worlds as well). This is however not possible with our HSMs. We therefore move the signing keys to the other worlds. The smart card which backs the signing keys in the non-signing Worlds is then shredded.","title":"HSM initialization"},{"location":"hsm_initialization/#hsm-initialization","text":"Before any operation can take place, all the HSMs need to be initialized. For various reasons, we decided to enroll all the HSMs in the same Security World. A Security World (or World for short) is a concept, which allows HSMs to share key material for redundancy purpose. Two HSMs enrolled in the same World are essentially identical. You can think of the World as the master encryption key, which other keys are then encrypted under. Enrolling a HSM in a World involves administrator smart cards. Blank cards are used to create a new World. Enrolling a HSM in an existing World requires the corresponding administrator smart cards.","title":"HSM initialization"},{"location":"hsm_initialization/#main-world","text":"Using the tools provided with the HSM, we create the main World. The smart cards which back this world need to be stored in a very secure location. They will be needed in the following cases: a number of HSMs (or locations) were damaged and the remaining locations no longer form a quorum. operators have lost their smart cards (or the passwords thereof) and new smart cards need to be issued. A 256-bit AES key (pubKey encryption key) is created at the same time as the main World. This key is used at wallet initialization time. When enrolling HSMs in the main World, the administrator need to initialize the nvram for rollback protection purpose. Typically, administrators will want to create a staging and a dev World. Creating all three Worlds at the same time is convenient.","title":"Main World"},{"location":"hsm_initialization/#signing-world","text":"A different World is used to sign the Core code. This creates a separation of duty: the engineers who sign and release the Core code don't have direct access to decrypt wallets. Ideally, the public part of the signing keys would be exported from the signing World, into the main World (and staging and dev Worlds as well). This is however not possible with our HSMs. We therefore move the signing keys to the other worlds. The smart card which backs the signing keys in the non-signing Worlds is then shredded.","title":"Signing World"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same printed page as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"merging_signatures/","text":"Merging signatures Once the Coordinator receives all the signatures, it can merge them and broadcast the transaction. The signatures need to be appended in a specific order (same order as their corresponding public keys). The code in ui/shared can be used to perform this operation if the Coordinator is implemented in Java.","title":"Merging signatures"},{"location":"merging_signatures/#merging-signatures","text":"Once the Coordinator receives all the signatures, it can merge them and broadcast the transaction. The signatures need to be appended in a specific order (same order as their corresponding public keys). The code in ui/shared can be used to perform this operation if the Coordinator is implemented in Java.","title":"Merging signatures"},{"location":"physical_components/","text":"Physical components Sensitive key material is only ever available in clear text inside the HSM. As a result, the other physical components aren't sensitive. We do however practice defense in depth. Choosing secure locations You should consult with a physical security specialist for best practices. Using dedicated rooms (or buildings), renting space in commercial data centers, or renting bank vaults all provide various tradeoffs. We recommend picking physical locations which are unlikely to be simultaneously affected by a disaster. Hardware Security Module (HSM) We leverage \"Thales nCipher Solo XC low\" HSMs. We picked this HSM for the following reasons: FIPS certified. Ability to run custom, signed code. Our HSM's form factor is PCIe, but a network-attached setup might also be feasible. A smart card reader (supplied with the HSM) and smart cards are required for various administrative, as well as operational, tasks. Running custom software on this HSM requires a CodeSafe license. The ECC license is not required. DVD reader The code which runs on the servers is distributed using DVDs. We picked DVDs for the following reasons: Immutable (mostly). Easy path for upgrading multiple remote locations. QR-code scanner Each remote location has two QR-code scanners. The QR-code scanner emulates a keyboard, which removes the need to deal with custom hardware drivers. One QR-code scanner is connected to the offline server, the other scanner is used to upload the signatures. Linux server We use standard Linux servers. Our servers need one PCIe slot (for the HSM), a DVD drive bay, a keyboard, an additional USB port (for the QR-code scanner) and a monitor. A hard drive is needed to store the wallet in its encrypted form. Monitor Standard monitor which plugs into the server. The monitor is used to display confirmation messages. The monitor's sensitivity ranges from medium to high, depending on what business logic rules are enforced within the HSM. Keyboard Standard keyboard which plugs into the server. The keyboard is used to confirm actions displayed by the UI. The keyboard is also used to enter the operator smart card password. Battery Powering the Linux server off a battery while a signing ceremony is taking place provides power isolation.","title":"Physical components"},{"location":"physical_components/#physical-components","text":"Sensitive key material is only ever available in clear text inside the HSM. As a result, the other physical components aren't sensitive. We do however practice defense in depth.","title":"Physical components"},{"location":"physical_components/#choosing-secure-locations","text":"You should consult with a physical security specialist for best practices. Using dedicated rooms (or buildings), renting space in commercial data centers, or renting bank vaults all provide various tradeoffs. We recommend picking physical locations which are unlikely to be simultaneously affected by a disaster.","title":"Choosing secure locations"},{"location":"physical_components/#hardware-security-module-hsm","text":"We leverage \"Thales nCipher Solo XC low\" HSMs. We picked this HSM for the following reasons: FIPS certified. Ability to run custom, signed code. Our HSM's form factor is PCIe, but a network-attached setup might also be feasible. A smart card reader (supplied with the HSM) and smart cards are required for various administrative, as well as operational, tasks. Running custom software on this HSM requires a CodeSafe license. The ECC license is not required.","title":"Hardware Security Module (HSM)"},{"location":"physical_components/#dvd-reader","text":"The code which runs on the servers is distributed using DVDs. We picked DVDs for the following reasons: Immutable (mostly). Easy path for upgrading multiple remote locations.","title":"DVD reader"},{"location":"physical_components/#qr-code-scanner","text":"Each remote location has two QR-code scanners. The QR-code scanner emulates a keyboard, which removes the need to deal with custom hardware drivers. One QR-code scanner is connected to the offline server, the other scanner is used to upload the signatures.","title":"QR-code scanner"},{"location":"physical_components/#linux-server","text":"We use standard Linux servers. Our servers need one PCIe slot (for the HSM), a DVD drive bay, a keyboard, an additional USB port (for the QR-code scanner) and a monitor. A hard drive is needed to store the wallet in its encrypted form.","title":"Linux server"},{"location":"physical_components/#monitor","text":"Standard monitor which plugs into the server. The monitor is used to display confirmation messages. The monitor's sensitivity ranges from medium to high, depending on what business logic rules are enforced within the HSM.","title":"Monitor"},{"location":"physical_components/#keyboard","text":"Standard keyboard which plugs into the server. The keyboard is used to confirm actions displayed by the UI. The keyboard is also used to enter the operator smart card password.","title":"Keyboard"},{"location":"physical_components/#battery","text":"Powering the Linux server off a battery while a signing ceremony is taking place provides power isolation.","title":"Battery"},{"location":"sample_transaction/","text":"2-of-4 multisig + segwit The following two transactions use a 2-of-4 wallet. The first transaction funds the cold wallet and the second transaction moves funds out. What is not shown here are the QR codes which carried the transaction metadata and signatures. We also skip over how the cold wallet is initialized for now. Sending funds to a cold wallet The following transaction was broadcasted on Testnet. The cold wallet address is a pay-to-script-hash type address ( 2NG8AE4w9bcaAAVzFF9dyPrqdtFt4rpCgqp ) 020000000151348dd145dda8e34b108ab000eb15c4f54d074c3117d7d2a43538f7a6ebf899000000006a47304402200 a7560d27bb4e78682626878e9541cf1e77061d25be999384be98069d259af7102207baef2bfe7befcd06af9efa0acf0 1e0a3d4d1c91e779b67b02303ccb58eccd120121025fa31a70ea8d8270a0e42cde93ae58e6f3160e0ab9470774b98b3 496cbc3e432feffffff0291ae1018000000001976a914300163c3ab4c2207be60f67402791fbc83f37c3f88ac80a4bf 070000000017a914faf4d7354aae5846569530283b31875e8439a2f1873c1d1500 Which decodes to: 02000000 // version 01 // n_inputs 51348dd145dda8e34b108ab000eb15c4f54d074c3117d7d2a43538f7a6ebf899 // prev_hash 00000000 // index 6a 47304402200a7560d27bb4e78682626878e9541cf1e77061d25be999384be98069d259af7102207baef2bfe7befcd06af9efa0acf01e0a3d4d1c91e779b67b02303ccb58eccd120121025fa31a70ea8d8270a0e42cde93ae58e6f3160e0ab9470774b98b3496cbc3e432 // script feffffff // sequence 02 // n_outputs 91ae101800000000 // amount 19 76a914300163c3ab4c2207be60f67402791fbc83f37c3f88ac // script 80a4bf0700000000 // amount 17 a914faf4d7354aae5846569530283b31875e8439a2f187 // script 3c1d1500 // timelock Retrieving funds from the cold wallet The signing ceremony produced two sets of signatures: 1. 304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36be2ef77ed02200ddc11839052972d 88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901 2. 3044022009d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7db c0885ee43850452dec77b0a206321dafcd8484ed2680471201 The signatures were then combined and broadcasted : 010000000001017be045ebc7a6f9245146654b4af72dc56313dde701f82332fdfa0c4662c4ef270100000023220 0205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4afeffffff02c0209002000000 017a91416872e5bd0e766876696531e68a87605fd082c4987804120050000000017a9142e820d410e36fb6ab1b2 72eb62a37282b95e2f2087040047304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36 be2ef77ed02200ddc11839052972d88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901473044022009 d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7dbc0885ee43 850452dec77b0a206321dafcd8484ed26804712018b5221022dc4f3706655e8c11685bfe1978e930bcbba1d8326 9f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962 102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33 ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae00000000 Which decodes to: 01000000 // version 00 // segwit marker 01 // segwit flag 01 // n_inputs 7be045ebc7a6f9245146654b4af72dc56313dde701f82332fdfa0c4662c4ef27 // prev_hash 01000000 // index 23 2200205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a // script feffffff // sequence 02 // n_outputs c020900200000000 // amount 17 a91416872e5bd0e766876696531e68a87605fd082c4987 // script 8041200500000000 // amount 17 a9142e820d410e36fb6ab1b272eb62a37282b95e2f2087 // script 04 // witness 00 // witness 47 304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36be2ef77ed02200ddc11839052972d88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901 // witness 47 3044022009d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7dbc0885ee43850452dec77b0a206321dafcd8484ed2680471201 // witness 8b 5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae // witness 00000000 // timelock","title":"Sample transaction"},{"location":"sample_transaction/#2-of-4-multisig-segwit","text":"The following two transactions use a 2-of-4 wallet. The first transaction funds the cold wallet and the second transaction moves funds out. What is not shown here are the QR codes which carried the transaction metadata and signatures. We also skip over how the cold wallet is initialized for now.","title":"2-of-4 multisig + segwit"},{"location":"sample_transaction/#sending-funds-to-a-cold-wallet","text":"The following transaction was broadcasted on Testnet. The cold wallet address is a pay-to-script-hash type address ( 2NG8AE4w9bcaAAVzFF9dyPrqdtFt4rpCgqp ) 020000000151348dd145dda8e34b108ab000eb15c4f54d074c3117d7d2a43538f7a6ebf899000000006a47304402200 a7560d27bb4e78682626878e9541cf1e77061d25be999384be98069d259af7102207baef2bfe7befcd06af9efa0acf0 1e0a3d4d1c91e779b67b02303ccb58eccd120121025fa31a70ea8d8270a0e42cde93ae58e6f3160e0ab9470774b98b3 496cbc3e432feffffff0291ae1018000000001976a914300163c3ab4c2207be60f67402791fbc83f37c3f88ac80a4bf 070000000017a914faf4d7354aae5846569530283b31875e8439a2f1873c1d1500 Which decodes to: 02000000 // version 01 // n_inputs 51348dd145dda8e34b108ab000eb15c4f54d074c3117d7d2a43538f7a6ebf899 // prev_hash 00000000 // index 6a 47304402200a7560d27bb4e78682626878e9541cf1e77061d25be999384be98069d259af7102207baef2bfe7befcd06af9efa0acf01e0a3d4d1c91e779b67b02303ccb58eccd120121025fa31a70ea8d8270a0e42cde93ae58e6f3160e0ab9470774b98b3496cbc3e432 // script feffffff // sequence 02 // n_outputs 91ae101800000000 // amount 19 76a914300163c3ab4c2207be60f67402791fbc83f37c3f88ac // script 80a4bf0700000000 // amount 17 a914faf4d7354aae5846569530283b31875e8439a2f187 // script 3c1d1500 // timelock","title":"Sending funds to a cold wallet"},{"location":"sample_transaction/#retrieving-funds-from-the-cold-wallet","text":"The signing ceremony produced two sets of signatures: 1. 304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36be2ef77ed02200ddc11839052972d 88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901 2. 3044022009d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7db c0885ee43850452dec77b0a206321dafcd8484ed2680471201 The signatures were then combined and broadcasted : 010000000001017be045ebc7a6f9245146654b4af72dc56313dde701f82332fdfa0c4662c4ef270100000023220 0205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4afeffffff02c0209002000000 017a91416872e5bd0e766876696531e68a87605fd082c4987804120050000000017a9142e820d410e36fb6ab1b2 72eb62a37282b95e2f2087040047304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36 be2ef77ed02200ddc11839052972d88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901473044022009 d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7dbc0885ee43 850452dec77b0a206321dafcd8484ed26804712018b5221022dc4f3706655e8c11685bfe1978e930bcbba1d8326 9f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962 102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33 ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae00000000 Which decodes to: 01000000 // version 00 // segwit marker 01 // segwit flag 01 // n_inputs 7be045ebc7a6f9245146654b4af72dc56313dde701f82332fdfa0c4662c4ef27 // prev_hash 01000000 // index 23 2200205211be1c60bb65d02a0fbc2b0d9ce77c83f680a1414248ca7a36232e2292ea4a // script feffffff // sequence 02 // n_outputs c020900200000000 // amount 17 a91416872e5bd0e766876696531e68a87605fd082c4987 // script 8041200500000000 // amount 17 a9142e820d410e36fb6ab1b272eb62a37282b95e2f2087 // script 04 // witness 00 // witness 47 304402200902963690c2161c47a2a050552d8d0653a25cd5760288395f2cb36be2ef77ed02200ddc11839052972d88da9c6044dc486b692d2fad2f2c11175f414d1733f9014901 // witness 47 3044022009d472294cf982690bb791e6a5fc0e209b2d12d524cc8cfc65c86a564aa64df3022031c6888c8a88e7dbc0885ee43850452dec77b0a206321dafcd8484ed2680471201 // witness 8b 5221022dc4f3706655e8c11685bfe1978e930bcbba1d83269f385c5242b00905a3253c2102359b50d66f4439fc135e558e4f09631aa8d1688553449cf794bf12f88d0877962102fd5283f39419f559dbc16a5ea6a721f22de21d224bc665b64c59102dfcc5253021036dd870c3272a0d1f1f33ee382ad9f3d7b370021e16b78528220907db41aa7d2454ae // witness 00000000 // timelock","title":"Retrieving funds from the cold wallet"},{"location":"signing_ceremony/","text":"Signing ceremony Once the wallet has funds, a signing ceremony can take place. A quorum of HSMs are provided metadata about the transaction being signed. One signature per input is returned to the Coordinator service.","title":"Signing ceremony"},{"location":"signing_ceremony/#signing-ceremony","text":"Once the wallet has funds, a signing ceremony can take place. A quorum of HSMs are provided metadata about the transaction being signed. One signature per input is returned to the Coordinator service.","title":"Signing ceremony"},{"location":"software_components/","text":"Software Components Coordinator service A Coordinator service is required to manage UTXO, initiate a signing ceremony and merge signatures. The coodrinator service and the Core need to agree on the gateway wallet. Core The Core code (C code) runs inside the HSM. The code opens a TCP socket and receives commands encoded using protobufs. The Core code performs AES encryption/decryption using a nCipher specific mechanism called Tickets. The HSM's endian-ness differs from our development environment. As a result, we wrote the code to be endianness agnostic. The Core and the UI need to agree on the version and multisig parameters. The Core and the Coordinator service need to agree on the gateway wallet. UI The UI (Java code) runs outside the HSM. The UI encodes commands using protobufs and sends them over the TCP socket. The application renders graphics by directly drawing to a Linux framebuffer. The UI also contains a bunch of utility functions, such as a base45 encoder/decoder. Code to merge the signatures and build a Segwit + Multisig transaction, etc. Java was chosen for two reasons: 1. Square maintains a large Java codebase. Engineers are comfortable using Java. 2. Languages other than C, Python, or Java, would require writing bindings to interact with the HSM. The UI and the Core need to agree on the version and multisig parameters. QR codes Bespoke QR codes are used to trigger operations and read the results. The QR codes contain base45-encoded protobufs. Live USB Creator Scripts which leverage Vagrant to generate a DVD. The DVD contains a signed artifact of the Core code and the UI as a jar. Beancounter Go program to audit balance of gateway and cold wallets. DVD Label Go program used to print DVD labels.","title":"Software components"},{"location":"software_components/#software-components","text":"","title":"Software Components"},{"location":"software_components/#coordinator-service","text":"A Coordinator service is required to manage UTXO, initiate a signing ceremony and merge signatures. The coodrinator service and the Core need to agree on the gateway wallet.","title":"Coordinator service"},{"location":"software_components/#core","text":"The Core code (C code) runs inside the HSM. The code opens a TCP socket and receives commands encoded using protobufs. The Core code performs AES encryption/decryption using a nCipher specific mechanism called Tickets. The HSM's endian-ness differs from our development environment. As a result, we wrote the code to be endianness agnostic. The Core and the UI need to agree on the version and multisig parameters. The Core and the Coordinator service need to agree on the gateway wallet.","title":"Core"},{"location":"software_components/#ui","text":"The UI (Java code) runs outside the HSM. The UI encodes commands using protobufs and sends them over the TCP socket. The application renders graphics by directly drawing to a Linux framebuffer. The UI also contains a bunch of utility functions, such as a base45 encoder/decoder. Code to merge the signatures and build a Segwit + Multisig transaction, etc. Java was chosen for two reasons: 1. Square maintains a large Java codebase. Engineers are comfortable using Java. 2. Languages other than C, Python, or Java, would require writing bindings to interact with the HSM. The UI and the Core need to agree on the version and multisig parameters.","title":"UI"},{"location":"software_components/#qr-codes","text":"Bespoke QR codes are used to trigger operations and read the results. The QR codes contain base45-encoded protobufs.","title":"QR codes"},{"location":"software_components/#live-usb-creator","text":"Scripts which leverage Vagrant to generate a DVD. The DVD contains a signed artifact of the Core code and the UI as a jar.","title":"Live USB Creator"},{"location":"software_components/#beancounter","text":"Go program to audit balance of gateway and cold wallets.","title":"Beancounter"},{"location":"software_components/#dvd-label","text":"Go program used to print DVD labels.","title":"DVD Label"},{"location":"supply_chain_security/","text":"Supply chain security An important aspect is making sure the code we are running is the code we think we are running. We will eventually document the build process, which will explain some of the measure we take in terms of supply chain security.","title":"Supply chain security"},{"location":"supply_chain_security/#supply-chain-security","text":"An important aspect is making sure the code we are running is the code we think we are running. We will eventually document the build process, which will explain some of the measure we take in terms of supply chain security.","title":"Supply chain security"},{"location":"wallet_initialization/","text":"Wallet initialization Once the HSMs have been initialized, a wallet initialization ceremony can take place. The wallet initialization is a two-step process. Step one: wallet encryption key creation In the first step, a wallet encryption key is created (256-bit AES). A wallet is then initialized. For additional safety purpose, entropy is mixed from the Linux server and the HSM. The resulting xpub is encrypted using the pubKey encryption key and exported. Above process takes place once per location By encrypting the xpub, we prevent the operators who are participating in the multi-party ceremony from being able to build a watch wallet. There's benefit in having a watch wallet which can only exist in the Coordinator service; including limiting the number of people who gain access to material non-public financial information. Step two: exchange of the encrypted xpub In the second step, each HSM is provided an encrypted xpub from the other locations. This information is stored in the wallet file and is required for signing transactions. A single xpub is revealed and uploaded to the Coordinator service. Above process also takes place once per location Once every location has finalized their wallet, the Coordinator service is able to derive addresses and watch transactions. Funds can be sent to and from the cold wallet.","title":"Wallet initialization"},{"location":"wallet_initialization/#wallet-initialization","text":"Once the HSMs have been initialized, a wallet initialization ceremony can take place. The wallet initialization is a two-step process.","title":"Wallet initialization"},{"location":"wallet_initialization/#step-one-wallet-encryption-key-creation","text":"In the first step, a wallet encryption key is created (256-bit AES). A wallet is then initialized. For additional safety purpose, entropy is mixed from the Linux server and the HSM. The resulting xpub is encrypted using the pubKey encryption key and exported. Above process takes place once per location By encrypting the xpub, we prevent the operators who are participating in the multi-party ceremony from being able to build a watch wallet. There's benefit in having a watch wallet which can only exist in the Coordinator service; including limiting the number of people who gain access to material non-public financial information.","title":"Step one: wallet encryption key creation"},{"location":"wallet_initialization/#step-two-exchange-of-the-encrypted-xpub","text":"In the second step, each HSM is provided an encrypted xpub from the other locations. This information is stored in the wallet file and is required for signing transactions. A single xpub is revealed and uploaded to the Coordinator service. Above process also takes place once per location Once every location has finalized their wallet, the Coordinator service is able to derive addresses and watch transactions. Funds can be sent to and from the cold wallet.","title":"Step two: exchange of the encrypted xpub"}]}